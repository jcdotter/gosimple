// Copyright 2022 escend llc. All rights reserved.
// Use of this source code is governed by a
// license that can be found in the gosimple LICENSE file.
// Author: jcdotter

package time

import (
	"log"
	"testing"
	"time"
)

func TestYearEnd(t *testing.T) {
	ds := [][]string{
		{"2022-12-31", "2022-12-31", "2022-12-31", "2022-12-31", "2022-12-31", "2022-12-31", "2022-12-31", "2022-12-31", "2022-12-31", "2022-12-31", "2022-12-31", "2022-12-31"},
		{"2023-11-30", "2022-11-30", "2022-11-30", "2022-11-30", "2022-11-30", "2022-11-30", "2022-11-30", "2022-11-30", "2022-11-30", "2022-11-30", "2022-11-30", "2022-11-30"},
		{"2023-10-31", "2023-10-31", "2022-10-31", "2022-10-31", "2022-10-31", "2022-10-31", "2022-10-31", "2022-10-31", "2022-10-31", "2022-10-31", "2022-10-31", "2022-10-31"},
		{"2023-09-30", "2023-09-30", "2023-09-30", "2022-09-30", "2022-09-30", "2022-09-30", "2022-09-30", "2022-09-30", "2022-09-30", "2022-09-30", "2022-09-30", "2022-09-30"},
		{"2023-08-31", "2023-08-31", "2023-08-31", "2023-08-31", "2022-08-31", "2022-08-31", "2022-08-31", "2022-08-31", "2022-08-31", "2022-08-31", "2022-08-31", "2022-08-31"},
		{"2023-07-31", "2023-07-31", "2023-07-31", "2023-07-31", "2023-07-31", "2022-07-31", "2022-07-31", "2022-07-31", "2022-07-31", "2022-07-31", "2022-07-31", "2022-07-31"},
		{"2023-06-30", "2023-06-30", "2023-06-30", "2023-06-30", "2023-06-30", "2023-06-30", "2022-06-30", "2022-06-30", "2022-06-30", "2022-06-30", "2022-06-30", "2022-06-30"},
		{"2023-05-31", "2023-05-31", "2023-05-31", "2023-05-31", "2023-05-31", "2023-05-31", "2023-05-31", "2022-05-31", "2022-05-31", "2022-05-31", "2022-05-31", "2022-05-31"},
		{"2023-04-30", "2023-04-30", "2023-04-30", "2023-04-30", "2023-04-30", "2023-04-30", "2023-04-30", "2023-04-30", "2022-04-30", "2022-04-30", "2022-04-30", "2022-04-30"},
		{"2023-03-31", "2023-03-31", "2023-03-31", "2023-03-31", "2023-03-31", "2023-03-31", "2023-03-31", "2023-03-31", "2023-03-31", "2022-03-31", "2022-03-31", "2022-03-31"},
		{"2023-02-28", "2023-02-28", "2023-02-28", "2023-02-28", "2023-02-28", "2023-02-28", "2023-02-28", "2023-02-28", "2023-02-28", "2023-02-28", "2022-02-28", "2022-02-28"},
		{"2023-01-31", "2023-01-31", "2023-01-31", "2023-01-31", "2023-01-31", "2023-01-31", "2023-01-31", "2023-01-31", "2023-01-31", "2023-01-31", "2023-01-31", "2022-01-31"},
	}
	for ye := 12; ye > 0; ye-- {
		for m := 12; m > 0; m-- {
			c := YearEnd(time.Time{}.AddDate(2021, m-1, 0), time.Month(ye))
			d, _ := time.Parse("2006-01-02", ds[12-ye][12-m])
			d = d.AddDate(0, 0, 1).Add(-1 * time.Nanosecond)
			if c != d {
				log.Fatalf("gosimple.types.time.YearEnd: miscalculation of month '%d' year end in month '%d'; expected '%s' got '%s'", m, ye, d, c)
			}
		}
	}
}

func TestQuarterEnd(t *testing.T) {
	ds := [][]string{
		{"2022-12-31", "2022-12-31", "2022-12-31", "2022-09-30", "2022-09-30", "2022-09-30", "2022-06-30", "2022-06-30", "2022-06-30", "2022-03-31", "2022-03-31", "2022-03-31"},
		{"2023-02-28", "2022-11-30", "2022-11-30", "2022-11-30", "2022-08-31", "2022-08-31", "2022-08-31", "2022-05-31", "2022-05-31", "2022-05-31", "2022-02-28", "2022-02-28"},
		{"2023-01-31", "2023-01-31", "2022-10-31", "2022-10-31", "2022-10-31", "2022-07-31", "2022-07-31", "2022-07-31", "2022-04-30", "2022-04-30", "2022-04-30", "2022-01-31"},
		{"2022-12-31", "2022-12-31", "2022-12-31", "2022-09-30", "2022-09-30", "2022-09-30", "2022-06-30", "2022-06-30", "2022-06-30", "2022-03-31", "2022-03-31", "2022-03-31"},
		{"2023-02-28", "2022-11-30", "2022-11-30", "2022-11-30", "2022-08-31", "2022-08-31", "2022-08-31", "2022-05-31", "2022-05-31", "2022-05-31", "2022-02-28", "2022-02-28"},
		{"2023-01-31", "2023-01-31", "2022-10-31", "2022-10-31", "2022-10-31", "2022-07-31", "2022-07-31", "2022-07-31", "2022-04-30", "2022-04-30", "2022-04-30", "2022-01-31"},
		{"2022-12-31", "2022-12-31", "2022-12-31", "2022-09-30", "2022-09-30", "2022-09-30", "2022-06-30", "2022-06-30", "2022-06-30", "2022-03-31", "2022-03-31", "2022-03-31"},
		{"2023-02-28", "2022-11-30", "2022-11-30", "2022-11-30", "2022-08-31", "2022-08-31", "2022-08-31", "2022-05-31", "2022-05-31", "2022-05-31", "2022-02-28", "2022-02-28"},
		{"2023-01-31", "2023-01-31", "2022-10-31", "2022-10-31", "2022-10-31", "2022-07-31", "2022-07-31", "2022-07-31", "2022-04-30", "2022-04-30", "2022-04-30", "2022-01-31"},
		{"2022-12-31", "2022-12-31", "2022-12-31", "2022-09-30", "2022-09-30", "2022-09-30", "2022-06-30", "2022-06-30", "2022-06-30", "2022-03-31", "2022-03-31", "2022-03-31"},
		{"2023-02-28", "2022-11-30", "2022-11-30", "2022-11-30", "2022-08-31", "2022-08-31", "2022-08-31", "2022-05-31", "2022-05-31", "2022-05-31", "2022-02-28", "2022-02-28"},
		{"2023-01-31", "2023-01-31", "2022-10-31", "2022-10-31", "2022-10-31", "2022-07-31", "2022-07-31", "2022-07-31", "2022-04-30", "2022-04-30", "2022-04-30", "2022-01-31"},
	}
	for ye := 12; ye > 0; ye-- {
		for m := 12; m > 0; m-- {
			c := QuarterEnd(time.Time{}.AddDate(2021, m-1, 0), time.Month(ye))
			d, _ := time.Parse("2006-01-02", ds[12-ye][12-m])
			d = d.AddDate(0, 0, 1).Add(-1 * time.Nanosecond)
			if c != d {
				log.Fatalf("gosimple.types.time.YearEnd: miscalculation of month '%d' year end in month '%d'; expected '%s' got '%s'", m, ye, d, c)
			}
		}
	}
}

func TestInstance(t *testing.T) {
	d := time.Date(2023, 1, 1, 0, 0, 0, 0, time.Now().Location())
	for i := 1; i < 5; i++ {
		if i == 0 {
			break
		}
		for w := 0; w < 7; w++ {
			if !Instance(i, time.Weekday(w), time.January, 2023).Equal(d) {
				log.Fatalf("gosimple.types.time.Instance: miscalculation on instance %v of %s for %s of 2023", i, time.Weekday(w), time.January)
			}
			if d.Day() == DaysInMonth(2023, 1) {
				return
			}
			d = d.AddDate(0, 0, 1)
			//fmt.Printf("%d %d Jan 22:  %v\n", i, w, Instance(i, time.Weekday(w), time.January, 2023))
		}
		if i == 4 {
			i = -2
		}
	}
}

func TestHolidays(t *testing.T) {
	d := []time.Time{
		time.Time{}.AddDate(2020, 0, 0),
		time.Time{}.AddDate(2020, 0, 17),
		time.Time{}.AddDate(2020, 0, 19),
		time.Time{}.AddDate(2020, 1, 14),
		time.Time{}.AddDate(2020, 4, 30),
		time.Time{}.AddDate(2020, 5, 17),
		time.Time{}.AddDate(2020, 6, 4),
		time.Time{}.AddDate(2020, 8, 5),
		time.Time{}.AddDate(2020, 9, 10),
		time.Time{}.AddDate(2020, 10, 10),
		time.Time{}.AddDate(2020, 10, 24),
		time.Time{}.AddDate(2020, 11, 23),
	}
	h := GetUsHolidays()
	for _, i := range d {
		if !h.IsHoliday(i) {
			log.Fatalf("gosimple.types.time.Holidays: issue validating holiday on %v", i)
		}
	}
}

/*
	func TestTime(t *testing.T) {

		for y := 12; y > 0; y-- {
			fmt.Print("{")
			for m := 12; m > 0; m-- {
				d := time.Date(2022, time.Month(m), 1, 0, 0, 0, 0, time.Now().Location())
				q := QuarterEnd(d, time.Month(y))
				fmt.Printf("\"%v\", ", q.Format("2006-01-02"))
			}
			fmt.Print("},")
			fmt.Println()
		}
	}
*/
